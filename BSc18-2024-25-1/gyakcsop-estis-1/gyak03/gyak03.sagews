︠4d0a2573-9c97-45e1-a9b7-4a7952307fbbs︠
# gyak03

# röpzh


# Írjon Python/SageMath függvényt, amely paraméterként sztringek listáját fogadja és visszatér listában a sztringek hosszával.


def foo(L):
    return [len(x) for x in L]

print(foo(["alma", "korte", "A"])) # eredménye [4, 5, 1]

︡73d81a16-0c07-44d6-b2ff-f9f42053d26e︡{"stdout":"[4, 5, 1]\n"}︡{"done":true}
︠f6b7f1bd-da96-4366-a4df-37bc18d8a257︠

len([1, 2, 3, 4])
︡9d341c86-3311-488c-bc94-2eba418d83aa︡{"stdout":"4\n"}︡{"done":true}
︠fd31981d-58c4-4fc2-b87f-04c71d517dda︠

# relációk

X = {1, 2, 3}
rendezett pár: (1, 2)
(2, 1)
R = {(1, 2), (2, 2), (2, 3)} az X halmazon
az 1 R relációban áll a 2-vel: (1, 2) eleme R-nek
R az 1-hez 2-őt rendel
pl. R nem reflexiv mert (1, 1) nem szerepel R-ben


R2 = {(1, 1), (1, 2), (2, 2), (3, 1), (3, 3)}
R2 reflexiv: minden a eleme X: (a, a) eleme R-nek


R3 tranzitiv: minden a, b, c eleme X: ha aRb és bRc akkor aRc
R3 = [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,3)]

︡9565011f-9e4c-4eae-8e18-4874c31f8a3e︡
︠e5331491-16cb-482f-819a-9329c672047fs︠
︡fad37213-0a50-4c99-b3d5-f16e73aa93cb︡{"done":true}
︠5cb557d7-791b-4471-98b6-ac90ffc04f92s︠

X = {1, 2, 3}
X
R = [(1, 1), (1, 2)]
(1, 2) in R
(1, 3) in R
︡7fa9bbf7-c530-4940-a58f-df4f5782070b︡{"stdout":"{1, 2, 3}\n"}︡{"stdout":"True\n"}︡{"stdout":"False\n"}︡{"done":true}
︠585d424c-6abd-4f02-bda4-97db45d8f11c︠

# fsor02/fel5

def Is_Reflexive(X, R):
    res = True
    for a in X:
        res = res and (a, a) in R
    return res

Is_Reflexive({1, 2, 3, 4}, [(1, 1), (2, 2), (3, 3), (4, 4)])
Is_Reflexive({1, 2, 3}, [(1, 1), (1, 2), (2, 2)])
Is_Reflexive({}, [])
︡72f6dcf2-babf-4d2d-914e-5deff3b6176a︡{"stdout":"True\n"}︡{"stdout":"False\n"}︡{"stdout":"True\n"}︡{"done":true}
︠d6f504a2-2559-4923-85cd-0b9f093f05cds︠

def Is_Reflexive(X, R):
    for a in X:
        if (a, a) not in R:
            return False
    return True

Is_Reflexive({1, 2, 3, 4}, [(1, 1), (2, 2), (3, 3), (4, 4)])
Is_Reflexive({1, 2, 3}, [(1, 1), (1, 2), (2, 2)])
Is_Reflexive({}, [])
︡1d802849-c4cf-43a3-a941-1fdff42fe506︡{"stdout":"True\n"}︡{"stdout":"False\n"}︡{"stdout":"True\n"}︡{"done":true}
︠49a6f979-3c34-46fe-9f89-c4058ccabae1s︠

def Is_Transitive(X, R):
    for a in X:
        for b in X:
            for c in X:
                if (a, b) in R and (b, c) in R and (a, c) not in R:
                    return False
    return True


Is_Transitive({1, 2, 3}, [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,3)])
Is_Transitive({1, 2, 3, 4}, [(1, 2), (2, 3), (1, 4), (2, 2)])
︡3d8ad65a-9116-49ab-a60c-8c9c2fdd7a47︡{"stdout":"True\n"}︡{"stdout":"False\n"}︡{"done":true}
︠93b8b26d-f2c7-4ca6-b4fa-730b9567323e︠


# fsor03

# fel1

# Írjon függvényt, amely egy adott N-hez megkonstruálja a legalább N hosszú, csupa összetett számokat tartalmazó intervallumot.

N = 2
[8, 9]

N = 3
[8, 9, 10]

N = 4




︡240dcc23-1494-4392-ab66-e276aa113cf7︡
︠2c8b6f68-aeec-4033-8817-cf80ce6cfc0as︠
︡cffb1aed-afd7-47e2-9a56-6796731f8f0d︡{"done":true}
︠24ae5340-1269-41a0-8a47-364740d964d5s︠




def Compound_List(N):
    res = []
    idx = N
    while len(res) < N:
        if is_prime(idx):
            res = []
        else:
            res.append(idx)
        idx += 1
    return res

Compound_List(2)
Compound_List(3)
Compound_List(4)
Compound_List(5)
Compound_List(6)
Compound_List(10)
Compound_List(20)
Compound_List(50)
Compound_List(100)
Compound_List(200)


︡94127f50-23cd-401a-856e-c3ab47a0152c︡{"stdout":"[8, 9]\n"}︡{"stdout":"[8, 9, 10]\n"}︡{"stdout":"[24, 25, 26, 27]\n"}︡{"stdout":"[24, 25, 26, 27, 28]\n"}︡{"stdout":"[90, 91, 92, 93, 94, 95]\n"}︡{"stdout":"[114, 115, 116, 117, 118, 119, 120, 121, 122, 123]\n"}︡{"stdout":"[1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149]\n"}︡{"stdout":"[19610, 19611, 19612, 19613, 19614, 19615, 19616, 19617, 19618, 19619, 19620, 19621, 19622, 19623, 19624, 19625, 19626, 19627, 19628, 19629, 19630, 19631, 19632, 19633, 19634, 19635, 19636, 19637, 19638, 19639, 19640, 19641, 19642, 19643, 19644, 19645, 19646, 19647, 19648, 19649, 19650, 19651, 19652, 19653, 19654, 19655, 19656, 19657, 19658, 19659]\n"}︡{"stdout":"[370262, 370263, 370264, 370265, 370266, 370267, 370268, 370269, 370270, 370271, 370272, 370273, 370274, 370275, 370276, 370277, 370278, 370279, 370280, 370281, 370282, 370283, 370284, 370285, 370286, 370287, 370288, 370289, 370290, 370291, 370292, 370293, 370294, 370295, 370296, 370297, 370298, 370299, 370300, 370301, 370302, 370303, 370304, 370305, 370306, 370307, 370308, 370309, 370310, 370311, 370312, 370313, 370314, 370315, 370316, 370317, 370318, 370319, 370320, 370321, 370322, 370323, 370324, 370325, 370326, 370327, 370328, 370329, 370330, 370331, 370332, 370333, 370334, 370335, 370336, 370337, 370338, 370339, 370340, 370341, 370342, 370343, 370344, 370345, 370346, 370347, 370348, 370349, 370350, 370351, 370352, 370353, 370354, 370355, 370356, 370357, 370358, 370359, 370360, 370361]"}︡{"stdout":"\n"}︡{"stderr":"Error in lines 20-20\n"}︡{"stderr":"Traceback (most recent call last):\n  File \"/cocalc/lib/python3.11/site-packages/smc_sagews/sage_server.py\", line 1250, in execute\n    exec(\n  File \"\", line 1, in <module>\n  File \"\", line 5, in Compound_List\n  File \"/ext/sage/10.4/src/sage/arith/misc.py\", line 555, in is_prime\n    ret = n.is_prime()\n          ^^^^^^^^^^^^\n  File \"src/cysignals/signals.pyx\", line 341, in cysignals.signals.python_check_interrupt\nKeyboardInterrupt\n"}︡{"done":true}
︠7e51605f-cdfe-4d9e-809e-0f291a526b8ds︠
︡a19d73d8-8daf-4c3d-9845-1de54b9a07ad︡{"done":true}
︠9128527e-eb42-4a4f-8e64-3a95bac7ae3bs︠

is_prime(10)
is_prime(11)
is_prime(91)
︡b25b86a3-441d-4a44-81fd-c7ca7127b9ea︡{"stdout":"False\n"}︡{"stdout":"True\n"}︡{"stdout":"False\n"}︡{"done":true}
︠de84d0ab-2f60-4926-9843-43e89faa9e49s︠




# N = 3
# pl. 4! = 1*2*3*4
#          4
#          3
#          2

# [4! + 2, 4! + 3, 4! + 4]

def Compound_List(N):
    return [ factorial(N + 1) + 2 .. factorial(N+1) + N + 1 ]


Compound_List(2)
Compound_List(3)
Compound_List(4)
Compound_List(5)
Compound_List(6)
Compound_List(10)
Compound_List(20)
Compound_List(50)
︡2d558838-7793-44c7-8428-6e20e88e90d5︡{"stdout":"[8, 9]\n"}︡{"stdout":"[26, 27, 28]\n"}︡{"stdout":"[122, 123, 124, 125]\n"}︡{"stdout":"[722, 723, 724, 725, 726]\n"}︡{"stdout":"[5042, 5043, 5044, 5045, 5046, 5047]\n"}︡{"stdout":"[39916802, 39916803, 39916804, 39916805, 39916806, 39916807, 39916808, 39916809, 39916810, 39916811]\n"}︡{"stdout":"[51090942171709440002, 51090942171709440003, 51090942171709440004, 51090942171709440005, 51090942171709440006, 51090942171709440007, 51090942171709440008, 51090942171709440009, 51090942171709440010, 51090942171709440011, 51090942171709440012, 51090942171709440013, 51090942171709440014, 51090942171709440015, 51090942171709440016, 51090942171709440017, 51090942171709440018, 51090942171709440019, 51090942171709440020, 51090942171709440021]\n"}︡{"stdout":"[1551118753287382280224243016469303211063259720016986112000000000002, 1551118753287382280224243016469303211063259720016986112000000000003, 1551118753287382280224243016469303211063259720016986112000000000004, 1551118753287382280224243016469303211063259720016986112000000000005, 1551118753287382280224243016469303211063259720016986112000000000006, 1551118753287382280224243016469303211063259720016986112000000000007, 1551118753287382280224243016469303211063259720016986112000000000008, 1551118753287382280224243016469303211063259720016986112000000000009, 1551118753287382280224243016469303211063259720016986112000000000010, 1551118753287382280224243016469303211063259720016986112000000000011, 1551118753287382280224243016469303211063259720016986112000000000012, 1551118753287382280224243016469303211063259720016986112000000000013, 1551118753287382280224243016469303211063259720016986112000000000014, 1551118753287382280224243016469303211063259720016986112000000000015, 1551118753287382280224243016469303211063259720016986112000000000016, 1551118753287382280224243016469303211063259720016986112000000000017, 1551118753287382280224243016469303211063259720016986112000000000018, 1551118753287382280224243016469303211063259720016986112000000000019, 1551118753287382280224243016469303211063259720016986112000000000020, 1551118753287382280224243016469303211063259720016986112000000000021, 1551118753287382280224243016469303211063259720016986112000000000022, 1551118753287382280224243016469303211063259720016986112000000000023, 1551118753287382280224243016469303211063259720016986112000000000024, 1551118753287382280224243016469303211063259720016986112000000000025, 1551118753287382280224243016469303211063259720016986112000000000026, 1551118753287382280224243016469303211063259720016986112000000000027, 1551118753287382280224243016469303211063259720016986112000000000028, 1551118753287382280224243016469303211063259720016986112000000000029, 1551118753287382280224243016469303211063259720016986112000000000030, 1551118753287382280224243016469303211063259720016986112000000000031, 1551118753287382280224243016469303211063259720016986112000000000032, 1551118753287382280224243016469303211063259720016986112000000000033, 1551118753287382280224243016469303211063259720016986112000000000034, 1551118753287382280224243016469303211063259720016986112000000000035, 1551118753287382280224243016469303211063259720016986112000000000036, 1551118753287382280224243016469303211063259720016986112000000000037, 1551118753287382280224243016469303211063259720016986112000000000038, 1551118753287382280224243016469303211063259720016986112000000000039, 1551118753287382280224243016469303211063259720016986112000000000040, 1551118753287382280224243016469303211063259720016986112000000000041, 1551118753287382280224243016469303211063259720016986112000000000042, 1551118753287382280224243016469303211063259720016986112000000000043, 1551118753287382280224243016469303211063259720016986112000000000044, 1551118753287382280224243016469303211063259720016986112000000000045, 1551118753287382280224243016469303211063259720016986112000000000046, 1551118753287382280224243016469303211063259720016986112000000000047, 1551118753287382280224243016469303211063259720016986112000000000048, 1551118753287382280224243016469303211063259720016986112000000000049, 1551118753287382280224243016469303211063259720016986112000000000050, 1551118753287382280224243016469303211063259720016986112000000000051]\n"}︡{"done":true}
︠ea1a5ddc-6d5c-4963-a55b-a6c7b7860d6d︠

Compound_List(1000)




︡97c7d976-6380-42dc-8006-8153eb120f0b︡
︠efd29e6f-f19b-4923-8379-376672b30eb2s︠
︡a0970c06-c9b9-4b78-97df-1325e54daaae︡{"done":true}
︠e718c38a-4251-4bd0-b8d6-5ce85a30ae9bs︠




# fel2

# Írjon függvényt a páros Goldbach-sejtés bemutatására. A páros Goldbach-sejtés szerint minden 2-nél nagyobb páros szám felírható két prímszám összegeként. Ha a függvény argumentuma nem megfelelő, a függvény dobjon ValueError kivételt.

def Even_Goldbach(x):
    if x <= 2 and x % 2 == 1:
        raise ValueError("x in invalid")

    for i in [2..x]:
        if is_prime(i):
            other = x - i
            if is_prime(other):
                return (i, other)
    return None


# (2, 2)
Even_Goldbach(4)

# (3, 5)
Even_Goldbach(8)
︡e1c854d3-4ae7-401c-b861-08281352561a︡{"stdout":"(2, 2)\n"}︡{"stdout":"(3, 5)\n"}︡{"done":true}
︠4c8e7da3-491e-46eb-a093-d1c98745e3d2s︠

Even_Goldbach(100)
Even_Goldbach(156)
︡9f5a5e20-563c-484c-ae40-a95d6ae89a6a︡{"stdout":"(3, 97)\n"}︡{"stdout":"(5, 151)\n"}︡{"done":true}
︠5f08d6a9-f202-43b1-af54-da55fb885147︠









