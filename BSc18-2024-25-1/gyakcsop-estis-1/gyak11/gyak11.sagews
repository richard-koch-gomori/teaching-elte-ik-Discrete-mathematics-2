︠741e895a-2d61-48dc-89cf-018decb8aee5s︠
# gyak11


# röpzh

# Írjon `foo(n, S)` függvényt, amely `n` és `S` paraméterek alapján visszatér az `n*x^n + (n-1) * x^(n-1) + ... + x^1 + S` polinommal.


ZZ['x']([1, 2, 3])
︡07021556-a27c-4425-a491-507cad8b9e60︡{"stdout":"3*x^2 + 2*x + 1\n"}︡{"done":true}
︠3eb03a2d-450e-4e52-a05f-f11b0af81b8as︠

def foo(n, S):
    L = [S] + [1..n]
    return ZZ['x'](L)

foo(5, 100)

︡ee65876a-7072-49b0-a3ef-9ec740047b04︡{"stdout":"5*x^5 + 4*x^4 + 3*x^3 + 2*x^2 + x + 100\n"}︡{"done":true}
︠0ea905dc-d706-4c68-811d-9871fecfe42es︠

def foo(n, S):
    return ZZ['x']([0..n]) + S

foo(5, 100)

︡0b7582e6-c8a5-4d63-b9f3-d40fb1f61825︡{"stdout":"5*x^5 + 4*x^4 + 3*x^3 + 2*x^2 + x + 100\n"}︡{"done":true}
︠ac6918c4-084b-46b9-b364-c0a316c99bf7s︠

x=2
4*x^3 - x^2 + 10

︡c34eac36-d748-45b1-86f1-8619dfaf1734︡{"stdout":"38\n"}︡{"done":true}
︠4a6cb82c-3bf6-452c-a6c1-7369ce7f887c︠

# fsor08

# 1

# n = 4
# m = 3
# S = 5

# p = 7
# a1 = 3
# a4 = 4


︡9e4f9429-fc81-4e0b-9bab-77d3ed6711c2︡
︠b10a5cb2-9158-428e-9272-e78e635f1f81s︠

reset('x')
p = GF(7)['x']( 4 * x^2 + 3 * x^1 + 5 )
p

︡f7f175a2-df8a-4d58-aaa1-f7290bcf773e︡{"stdout":"4*x^2 + 3*x + 5\n"}︡{"done":true}
︠19dcd7fd-1020-4cc1-8842-a5ab7f8c625fs︠



(1, p(1))
(2, p(2))
(3, p(3))
(4, p(4))
︡ffc2c3c3-be0c-46fa-8c26-6af0b90235b3︡{"stdout":"(1, 5)\n"}︡{"stdout":"(2, 6)\n"}︡{"stdout":"(3, 1)\n"}︡{"stdout":"(4, 4)\n"}︡{"done":true}
︠417ba3e4-ba17-409f-a895-10f17f5eb123s︠

# tfh rendelkezünk pl. a (1, 5) (2, 6) (2, 6) titokrészletekkel

GF(7)['x'].lagrange_polynomial([(1, 5), (2, 6), (4, 4)])
︡064de8d4-0fc3-4a41-bf70-89bb0776d674︡{"stdout":"4*x^2 + 3*x + 5\n"}︡{"done":true}
︠f5f1141d-8e62-45f3-a767-c11581c87ceas︠

GF(7)['x'].lagrange_polynomial([(1, 5), (2, 6)])
︡55c004fc-af1c-4088-b6b2-9f2604025999︡{"stdout":"x + 4\n"}︡{"done":true}
︠8ac02df8-5131-463e-97e7-474ea06b68e4s︠


# 2

# Írjon SSS_secret_pieces_from_primenum_and_coeffs(num_of_people, secret, primenum, coeff) szignatúrával függvényt, amely a secret titkokból num_of_people db titokrészletet készít, ahol a használt prímszám primenum legyen, coeff pedig tartalmazza a polinom szabad tagján kívüli együtthatókat.

def SSS_secret_pieces_from_primenum_and_coeffs(num_of_people, secret, primenum, coeff):
    polycoeff = coeff
    polycoeff.append(secret)
    polycoeff.reverse()
    #print(polycoeff)
    poly = GF(primenum)['x'](polycoeff)
    print(poly)
    L = []
    for i in [1..num_of_people]:
        L.append((i, poly(i)))
    return L



SSS_secret_pieces_from_primenum_and_coeffs(4, 5, 7, [3, 4])
︡1e8867c8-a599-4225-80ce-9ebaa50e1145︡{"stdout":"3*x^2 + 4*x + 5\n[(1, 5), (2, 4), (3, 2), (4, 6)]\n"}︡{"done":true}
︠6392d1da-951c-41e2-a1fb-01827e63e4c4s︠


def SSS_secret_pieces_from_primenum_and_coeffs(num_of_people, secret, primenum, coeff):
    polycoeff = [secret] + coeff
    #print(polycoeff)
    poly = GF(primenum)['x'](polycoeff)
    #print(poly)
    L = []
    for i in [1..num_of_people]:
        L.append((i, poly(i)))
    return L



SSS_secret_pieces_from_primenum_and_coeffs(4, 5, 7, [3, 4])
︡dd63ba0d-940d-4610-b98a-2d5b0a2bd4af︡{"stdout":"[(1, 5), (2, 6), (3, 1), (4, 4)]\n"}︡{"done":true}
︠53137f85-4369-48ef-9b1d-ff21f9993f66s︠


def SSS_compute_secret(primenum, secret_pieces):
    return GF(primenum)['x'].lagrange_polynomial(secret_pieces)(0)

SSS_compute_secret(7, [(2, 6), (3, 1), (4, 4)])
︡fd88e860-df59-4e7d-956b-2d799174dbd5︡{"stdout":"5"}︡{"stdout":"\n"}︡{"done":true}
︠8204335d-a1eb-4492-a96f-e6970165213as︠

SSS_compute_secret(7, [(2, 6), (4, 4)])
︡0f75680f-6c0a-446e-a432-4143d70a2b36︡{"stdout":"1\n"}︡{"done":true}
︠d6cde78b-41a1-4e57-8abe-0f7b03f6eca3s︠

def Convert_String_to_Num256(string):
    idx = 0
    res = 0
    rev_string = list(string)
    rev_string.reverse()
    for ch in rev_string:
        #print(ch)
        res += ord(ch) * 256^idx
        idx += 1

    return res

def Convert_Num256_to_String(num):
    res = list()

    while num > 0:
        res.append(chr(num % 256)) # Integer(num % 256))
        num = num // 256

    res.reverse()
    return "".join(res)

︡30bb2141-5a66-4dd6-b209-2d53256fcae2︡{"done":true}
︠65c29e0e-f96a-4111-9637-3122e092d6b5s︠

def SSS_secret_pieces(required_num_of_people, num_of_people, secret):
    secret_num = Convert_String_to_Num256(secret)

    primenum = next_prime(randint(1, 100) * max(num_of_people, secret_num))
    coeff = [randint(1, primenum - 1) for i in [1..required_num_of_people - 1]]
    return primenum, SSS_secret_pieces_from_primenum_and_coeffs(num_of_people, secret_num, primenum, coeff)


SSS_secret_pieces(5, 10, "ABC")
︡45075f99-bede-4063-bea9-f8298b3732cb︡{"stdout":"(64152047, [(1, 11264231), (2, 20575749), (3, 27598589), (4, 37446243), (5, 806416), (6, 6397167), (7, 24358721), (8, 34557563), (9, 26586438), (10, 63916398)])\n"}︡{"done":true}
︠6c7c8f18-6d39-48b5-aab1-c43565bbc045s︠

SSS_compute_secret(64152047, [(1, 11264231), (2, 20575749), (3, 27598589), (4, 37446243), (5, 806416)])
︡8ba08d26-6150-402f-85e9-032fa7f4b94b︡{"stdout":"4276803\n"}︡{"done":true}
︠144c5771-160d-4a93-a9b6-46f722ee2757s︠


Convert_Num256_to_String(4276803)
︡69f8573d-35a0-4fef-ba22-5056f69ddc03︡{"stdout":"'ABC'\n"}︡{"done":true}
︠13bd3431-4db5-4211-9d97-7de4680b344as︠


# 6

password = "34fg__#Gfb34226fdsWWQl36lII234i<!%fGZjsdJFEBD77467effO+36{}__IOQsFF&363&ZzOO053"
SSS_secret_pieces(7, 10, password)
︡8d6ed42b-1a87-4c10-b84e-c06de7baaa4c︡{"stdout":"(124765657370750167507634055016685118216345755364024191846825901443615573070961627721307690762475163951187519866521413787115414035725427776166609079033923591423706329535767582674764475510769897, [(1, 92473976240047905954632719314673613440660212993670123207780566220987733197023541504095767776865669093306055493379658173583853427400071340468327065963809421935615082756785934607663877524913997), (2, 120870370251466868317658598743200738417145813806084742655052152914344746517281052689740400506053144737815871423143943445189632564019202439500910957098355212733808630213625272954534469609055034), (3, 117666263827910945575305194445506466720042612065997296950994962323693871021036349268132229335422506527889105253214538695740059602649292680375838129903598759468326054351095297370054860341495806), (4, 105857403985348533529916417884115324996135627321053296380438130780342353173388587983279858916367300182951730317688105686126641017961838792119705919749129641402499801334149743270428547516817190), (5, 60222446496149591564930395901112774774118451751098732317774222414279160685726558260974177892976382362251622615156985097220663993083787315434983392352823478785530424615185737460299536338778766), (6, 8582211395906493721608088242468833506645242477022301254428881396618191153452274970030187409729654486642375189419093255388567526691644850811888035025526874136529952968047675635214235140558569), (7, 27087368789223888643891239782544583573643711461769465227571722724645253721506663359506342991705219492197086645434799791769871978765145615810606103300605794352449360939597661811758044257472825), (8, 4768897583727400883755612432096451030543357639504156803242560105853250706735708450593719034822797564464603934009372448202253019275048535347247543914433802216183812183084927010602162541405774), (9, 50710918747542346120497881846574081615839228821087471541674281046274570673828462932328831243449548511680858470850885539601658229883058298149799047375285277270799982423687305915811940092338859), (10, 46658014641240450202347538734490395421842149007583045782901551819723816113287380905437827865666333362685057191746626627412497929948737065384766281713550528975409507627013779413243071077740517)])"}︡{"stdout":"\n"}︡{"done":true}
︠a1903f10-1d76-41a2-b7d0-fa4b2e4b36b9s︠



SSS_compute_secret(124765657370750167507634055016685118216345755364024191846825901443615573070961627721307690762475163951187519866521413787115414035725427776166609079033923591423706329535767582674764475510769897, [(1, 92473976240047905954632719314673613440660212993670123207780566220987733197023541504095767776865669093306055493379658173583853427400071340468327065963809421935615082756785934607663877524913997), (2, 120870370251466868317658598743200738417145813806084742655052152914344746517281052689740400506053144737815871423143943445189632564019202439500910957098355212733808630213625272954534469609055034), (3, 117666263827910945575305194445506466720042612065997296950994962323693871021036349268132229335422506527889105253214538695740059602649292680375838129903598759468326054351095297370054860341495806), (4, 105857403985348533529916417884115324996135627321053296380438130780342353173388587983279858916367300182951730317688105686126641017961838792119705919749129641402499801334149743270428547516817190), (5, 60222446496149591564930395901112774774118451751098732317774222414279160685726558260974177892976382362251622615156985097220663993083787315434983392352823478785530424615185737460299536338778766), (6, 8582211395906493721608088242468833506645242477022301254428881396618191153452274970030187409729654486642375189419093255388567526691644850811888035025526874136529952968047675635214235140558569), (7, 27087368789223888643891239782544583573643711461769465227571722724645253721506663359506342991705219492197086645434799791769871978765145615810606103300605794352449360939597661811758044257472825)])
︡4a0a590e-8417-4c92-821c-a09444d7ddbc︡{"stdout":"3564733067735719071646687286191003377609878724686405481337882898389016373456046506323076878927861827176786281900611822489011829592155079319045973686683531183534466558164788076421842157450547\n"}︡{"done":true}
︠fd18225b-36c4-4c3a-8090-410e70a5d5c5s︠

Convert_Num256_to_String(3564733067735719071646687286191003377609878724686405481337882898389016373456046506323076878927861827176786281900611822489011829592155079319045973686683531183534466558164788076421842157450547)
︡f0cef48f-baff-4c88-a603-dea1e055e4e4︡{"stdout":"'34fg__#Gfb34226fdsWWQl36lII234i<!%fGZjsdJFEBD77467effO+36{}__IOQsFF&363&ZzOO053'\n"}︡{"done":true}
︠70595ead-9e09-4e1e-9c8a-926d4534cfc7s︠


computed_password = '34fg__#Gfb34226fdsWWQl36lII234i<!%fGZjsdJFEBD77467effO+36{}__IOQsFF&363&ZzOO053'


computed_password == password
︡53980575-7ec7-4f4f-8317-1c2914e88caa︡{"stdout":"True\n"}︡{"done":true}
︠1bad7165-118a-4822-84b3-42f14d0e2a4f︠









